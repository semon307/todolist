{"version":3,"sources":["DAL/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","BLL/AuthReducer.ts","BLL/app-reducer.ts","BLL/todolists-reducer.ts","BLL/tasks-reducer.ts","UI/Common/AddItemForm/AddItemForm.tsx","UI/Common/EditableSpan/EditableSpan.tsx","UI/TodolistsList/Todolist/Task/Task.tsx","UI/TodolistsList/Todolist/Todolist.tsx","UI/TodolistsList/TodolistsList.tsx","UI/Common/ErrorSnackbar/ErrorSnackbar.tsx","UI/Login/Login.tsx","App.tsx","BLL/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","extraReducers","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","Button","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb61cc8a.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '22ef31f8-5320-4166-8a28-b0a3a258ac17'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType){\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{item: TodolistType}>>>('auth/login', data)\r\n    },\r\n    me(){\r\n        return instance.get(\"auth/me\")\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type FormikErrorType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\nexport type LoginParamsType = FormikErrorType & {\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../BLL/app-reducer'\r\nimport {ResponseType} from '../DAL/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import { Dispatch } from 'redux'\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from './app-reducer'\nimport {authAPI, LoginParamsType} from \"../DAL/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nconst initialState = {\n    isLoggedIn: false\n}\nconst slice = createSlice({\n    name: \"auth\",\n    initialState: initialState,\n    reducers: {\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>){\n            state.isLoggedIn = action.payload.value\n        }\n    }\n})\nexport const authReducer = slice.reducer;\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\n\n\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    authAPI.login(data)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: true}))\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const logoutTC = () => (dispatch: Dispatch) => {\n    authAPI.logout().then(res => {\n        if (res.data.resultCode === 0){\n            dispatch(setIsLoggedInAC({value: false}))\n        }\n    })\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../DAL/todolists-api\";\r\nimport {setIsLoggedInAC} from \"./AuthReducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>){\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>){\r\n            state.status = action.payload.status\r\n        },\r\n        setInitializedAC(state, action: PayloadAction<{status: boolean}>){\r\n            state.isInitialized = action.payload.status\r\n        },\r\n\r\n    }\r\n})\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppErrorAC, setAppStatusAC, setInitializedAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const authMeTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.me().then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n            }\r\n        })\r\n            .finally(() => dispatch(setInitializedAC({status: true})))\r\n    }\r\n}\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetInitializeType = ReturnType<typeof setInitializedAC>\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../DAL/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from './app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > 1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    },\r\n    extraReducers: {\r\n\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC, addTodolistAC,\r\n    changeTodolistTitleAC, changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC, setTodolistsAC\r\n} = slice.actions\r\n// export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TODOLIST':\r\n//             return state.filter(tl => tl.id !== action.id)\r\n//         case 'ADD-TODOLIST':\r\n//             return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n//\r\n//         case 'CHANGE-TODOLIST-TITLE':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n//         case 'CHANGE-TODOLIST-FILTER':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n//         case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n//         case 'SET-TODOLISTS':\r\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\n// export const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n// export const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\n// export const changeTodolistTitleAC = (id: string, title: string) => ({\r\n//     type: 'CHANGE-TODOLIST-TITLE',\r\n//     id,\r\n//     title\r\n// } as const)\r\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n//     type: 'CHANGE-TODOLIST-FILTER',\r\n//     id,\r\n//     filter\r\n// } as const)\r\n// export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n//     type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\n// export const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n// type ActionsType =\r\n//     | RemoveTodolistActionType\r\n//     | AddTodolistActionType\r\n//     | ReturnType<typeof changeTodolistTitleAC>\r\n//     | ReturnType<typeof changeTodolistFilterAC>\r\n//     | SetTodolistsActionType\r\n//     | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {\r\n    addTodolistAC,\r\n    AddTodolistActionType,\r\n    removeTodolistAC,\r\n    RemoveTodolistActionType, setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../DAL/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from './store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from './app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1){\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType}>){\r\n            state[action.payload.task.todoListId].unshift(action.payload.task);\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1){\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>){\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n      builder.addCase(addTodolistAC, (state, action) => {\r\n          state[action.payload.todolist.id] = []\r\n      })\r\n      builder.addCase(removeTodolistAC, (state, action) => {\r\n          delete state[action.payload.id]\r\n      })\r\n      builder.addCase(setTodolistsAC, (state, action) => {\r\n          action.payload.todolists.forEach((tl: any) => {\r\n              state[tl.id] = []\r\n          })\r\n      })\r\n\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Button} from \"@mui/material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <Button>+</Button>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../Common/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../DAL/todolists-api'\r\nimport {Button} from \"@mui/material\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Button>x</Button>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../Common/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../Common/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../DAL/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../../../BLL/todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../../../BLL/tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Button>x</Button>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../BLL/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from '../../BLL/todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from '../../BLL/tasks-reducer'\r\nimport { TaskStatuses } from '../../DAL/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../Common/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn){\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../../BLL/store';\r\nimport { setAppErrorAC } from '../../../BLL/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"../../BLL/AuthReducer\";\nimport {FormikErrorType} from \"../../DAL/todolists-api\";\nimport {AppRootStateType} from \"../../BLL/store\";\nimport {Navigate} from \"react-router-dom\";\n\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: Partial<FormikErrorType> = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password){\n                errors.password = 'Required'\n            } else if (values.password.length < 3){\n                errors.password = \"Min length is 4 symbols\"\n            }\n            return errors;\n        },\n\n        onSubmit: values => {\n            // alert(JSON.stringify(values));\n            dispatch(loginTC(values))\n        },\n    })\n    if (isLoggedIn){\n        return <Navigate to={\"/\"}/>\n    }\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}> here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n                <form onSubmit={formik.handleSubmit}>\n                <FormGroup>\n                    <TextField label=\"Email\" margin=\"normal\"\n                        {...formik.getFieldProps(\"email\")}\n                               // onBlur={formik.handleBlur}\n                               // onChange={formik.handleChange} value={formik.values.email}\n                    />\n                    {formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                    <TextField type=\"password\" label=\"Password\"\n                               margin=\"normal\"\n                        {...formik.getFieldProps(\"password\")}\n                    />\n                    {formik.touched.password && formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                    <FormControlLabel label={'Remember me'} control={<Checkbox\n                        {...formik.getFieldProps(\"rememberMe\")}\n                   />}/>\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>\n                        Login\n                    </Button>\n                </FormGroup>\n                </form>\n            </FormControl>\n        </Grid>\n    </Grid>\n}\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from './UI/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { AppRootStateType } from './BLL/store'\r\nimport {authMeTC, RequestStatusType} from './BLL/app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nimport { ErrorSnackbar } from './UI/Common/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"./UI/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"./BLL/AuthReducer\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(()=> {\r\n        dispatch(authMeTC())\r\n    }, [])\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    if (!isInitialized){\r\n        return  <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn ? <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button> : null}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/\"} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"login\"} element={<Login/>}/>\r\n                    <Route path=\"404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to='/404'/>}/>\r\n                </Routes>\r\n                {/*<TodolistsList demo={demo}/>*/}\r\n                {/*<Login/>*/}\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"./AuthReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './BLL/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}